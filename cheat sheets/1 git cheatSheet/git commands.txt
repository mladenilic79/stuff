
0. interrupt options
	ctrl-c
	q

1. git
install git
config list & edit settings
	git config --list 
	git config --global user.name blondiee
	git config --global user.email mladenilic79@gmail.com

2. GitHub
create account

3. start project

option 1: clone directory
make full copy of remote repository in current directory
	git clone <remote url>

option 2: create repo online
initialize/reinitialize working directory
	git init
add remote set to name "origin"
	git remote add <<remote repo name>> <<remote repo url>>
	git remote add origin https://github.com/mladenilic79/nesto
verify online repositories
	git remote
	git remote -v
pull readme & gitignore & license from remote to local branch "main"
	git pull <<remote repo name>> <<local branch name>>
	git pull origin main
this is older not needed anymore
	git pull origin main --allow-unrelated-histories

4. check status as needed, state of your files, if tracked, modified and branch your on
	git status

5. add file or all files from working tree to index/staging area
	git add .
	git add <<file.extension>>
remove files from working tree and index/staged area
	git rm <<file.extension>>
delete file from index/staged area only
	git rm --cached <<file.extension>>

6. record to local repo with or without text editor
	git commit -m '<enter comment here>'
	git commit

7. first push to set upstream (“–set-upstream”), also with force ("--force") option to overwrite remote if needed
	git push <<remote repo name or url>> <<local branch name>>
	git push -u origin main
if you do git pull origin main in step 3 -f option is not needed
	git push -u -f origin main

8. everything is set just use 
	git push
	git pull

gitignore
	! - include after excluded, for example, exclude directory but include one file from it
	python\ scripts\ suite\ PARTIAL\ GIT/*
	!python\ scripts\ suite\ PARTIAL\ GIT/quarterly\ new.py 

getting commit data
	git log
	git log --oneline
	git log --stat
	git log --graph





@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@ start @@@@@@@@@@@@@@

remote
	git remote set-url <remote repo name> <url> (change url for the remote)
		(git remote set-url origin https://github.com/eBlondie/java_mobilniOperateri)
		(git remote set-url origin git@github.com:USERNAME/REPOSITORY.git)
	git remote rm <remote repo name> (delete connection to remote repo)
	git remote rename <old remote repo name> <new remote repo name> (origin or other)

@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@ info @@@@@@@@@@@@@@@

diff
	git diff (shows what you changed, but haven't staged)
	git diff --cached (shows what has been staged, but not committed) (or git diff --staged)
	git diff HEAD (changes in working tree from last commit, git diff + git diff -cached)
	git diff <branch name>..<branch name> (compare two branches)
	git diff --no-index <file_a> <file_b> (compare two files with id/paths, doesn't need to be tracked by git)???

@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@ branching @@@@@@@@@@

branch list
	git branch (or git branch --list) (list all branches, current branch with *)
branch create/delete/rename/move
	git branch <branch name> (create branch)
	git branch -d <branch name>
		(safe delete, prevents deleting branch if it has unmerged changes)
	git branch -D <branch name>
		(unsafe delete, delete branch even if it has unmerged branch)
	git branch -m <branch name> (move/rename branch)
branch pointer
	git branch -f <branch name> <commit hash>
		(move branch to specified commit, create if doesn't exists)?
	git branch -u <origin/remote branch name> <branch name>
		(associate branch to remote branch or upstream branch)?
checkout
	git checkout <master / branch name / commit hash / tag>
		(switch to branch pointer or specified commit)
		(update files in working tree, updates HEAD)
	git checkout <master / branch name / commit hash / tag> <^2>
		(for second parent branch or up)

@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@ special @@@@@@@@@@@@

undo
	git reset <commit hash>
		(move branch pointer to any previous commit, use localy)
	git revert <commit hash>
		(reset branch remote changes to specified commit, use on remote)
merge/rebase/cherry-pick
	git merge <branch name>
		(merge branch with current branch with opening editor)
	git merge --no-edit <branch name>
		(merge branch with current branch without opening editor)
	git rebase <branch name> (merge/connect current branch to named branch)

@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@ remote @@@@@@@@@@@@@

fetch
	git fetch <remote repo name> (get everything)
	git fetch <remote repo name> <branch name> (get one branch only)
	git fetch --all (fetches all registered remotes and their branches)
pull
	git pull <remote repo name> (fetch & merge)
	git pull --rebase <remote repo name> (fetch & rebase)
	git pull <remote repo name> <branch name> (pull specific branch; fetch & merge)
pull with disregard local changes & commits
	git reset --hard origin/main
push
	git push <remote repo name or url> <branch name> --allow-unrelated-histories
		(for syncing project started from two end independantly)
	git push <remote repo name> --all
		(push all of your local branches to the specified remote)

@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@ tags @@@@@@@@@@@@@@@

	git tag (list all tags)
	git show <version number> (show tag details)
	git tag <version number> (tag current branch head)
	git tag <version number> <commit hash> (tag current branch specify commit)
	git tag -a <version number>  (tag previous commit)
	git tag -a <version number> -m '<comment>' (tag previous commit direct)
